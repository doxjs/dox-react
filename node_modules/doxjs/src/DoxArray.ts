import { RuntimeEvent, DoxArrayProxy, DoxCallback, DoxEventsStore, DoxObjectProxy } from "./DoxInterfaces";
import { defineProperty, getKeys, _toString, isArray, isObject, isPrimary, hasProperty, isSame } from "./utils";
import { DoxObject } from "./DoxObject";
import DoxJS from "./index";
import * as dfa from "./core";

export class DoxArray<T> {

    private runtimeEvent: RuntimeEvent<any> = {
        isLegal: false,
        value: (store) => {}
    };
    private eventsStore: DoxEventsStore<any> = {};
    private dataToProxy: T[] = [];
    private target: T[];
    private proxy: DoxArrayProxy<T> = {
        length: 0
    };
    private root: DoxJS<any>;
    private keys: string[];
    private delicate: boolean = true;
    private parentEvents: DoxCallback<any>[] = [];

    constructor(target: T[], root: DoxJS<any>, parentEvents: DoxCallback<any>[] = []) {
        this.target = target;
        this.root = root;
        this.keys = getKeys(target);
        this.parentEvents = parentEvents;
        this.init();
    }

    private init() {
        this.keys.forEach(key => {
            this.eventsStore[key] = [];
            this.proxy[key] = undefined;
            defineProperty(this.proxy, key, {
                get: () => {
                    if (this.runtimeEvent.isLegal) {
                        this.eventsStore[key] = this.eventsStore[key].reduce((i, f) => {
                            if (f !== i[0]) {
                                i.push(f);
                            }
                            return i;
                        }, [this.runtimeEvent.value]);
                    }

                    if ((this.dataToProxy[key] instanceof DoxObject) || (this.dataToProxy[key] instanceof DoxArray)) {
                        if (this.runtimeEvent.isLegal) {
                            this.dataToProxy[key].extendsRuntimeEvent(this.runtimeEvent);
                        }
                        return this.dataToProxy[key].observe();
                    } else if (isPrimary(this.dataToProxy[key])) {
                        return this.dataToProxy[key];
                    }
                },

                set: (newValue) => {
                    if (!isSame(newValue, this.dataToProxy[key])) {
                        if (isPrimary(newValue)) {
                            this.dataToProxy[key] = newValue;
                        } else if (isObject(newValue)) {
                            this.dataToProxy[key] = new DoxObject(newValue, this.root);
                        } else if (isArray(newValue)) {
                            this.dataToProxy[key] = new DoxArray(newValue, this.root, this.parentEvents);
                        }
                    }
                    if (this.delicate) {
                        this.eventsStore[key].forEach(f => f(this.root.observe()));
                    }
                }
            });
            this.proxy[key] = this.target[key];
        });

        defineProperty(this.proxy, "length", {
            enumerable: false,
            configurable: false,
            writable: true,
            value: this.target.length
        });

        dfa.methods.forEach(method => {
            defineProperty(this.proxy, method, {
                configurable: false,
                writable: false,
                enumerable: false,
                value: (...args) => {
                    this.toggleDelicate(false);
                    let result = dfa[method].call(this.proxy, ...args);
                    this.parentEvents.forEach(f => {
                        f(this.root.observe());
                    });
                    this.toggleDelicate();
                    return result;
                }
            });
        });
    }

    private toggleDelicate(is: boolean = true) {
        this.delicate = is;
    }

    public extendsRuntimeEvent(callback: RuntimeEvent<T>) {
        this.runtimeEvent = callback;
    }

    public observe(): DoxArrayProxy<T> {
        return this.proxy;
    }
}
