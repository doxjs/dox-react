import { DoxObject } from "./DoxObject";
import { isObject, warn, hasProperty, _toString, isFunction } from "./utils";
export default class DoxJS {
    constructor(target) {
        if (!isObject(target)) {
            warn(`DoxJS only accept object as argument`);
        }
        else {
            this.sourceObject = new DoxObject(target, this);
        }
    }
    subscribe(action, excuteLater = false, context) {
        if (isFunction(action)) {
            this.runtimeEvent = {
                isLegal: true,
                value: action
            };
            let fn = () => {
                this.sourceObject.extendsRuntimeEvent(this.runtimeEvent);
                action(this.sourceObject.observe());
                this.runtimeEvent.isLegal = false;
            };
            return (excuteLater ? fn : fn());
        }
        else if (_toString.call(action) === '[object String]') {
            if (hasProperty(this.listeners, action)) {
                if (context) {
                    this.subscribe(this.listeners[action].bind(context), excuteLater);
                }
                else {
                    this.subscribe(this.listeners[action], excuteLater);
                }
            }
        }
        else {
            warn(`First parameter of subscribe should be Function or String`);
        }
    }
    bindListeners(listeners = {}) {
        this.listeners = listeners;
    }
    observe() {
        return this.sourceObject.observe();
    }
    bindActions(actions = {}) {
        this.actions = actions;
    }
    dispatch(action, ...args) {
        if (hasProperty(this.actions, action)) {
            this.actions[action](this.sourceObject.observe(), ...args);
        }
    }
}
