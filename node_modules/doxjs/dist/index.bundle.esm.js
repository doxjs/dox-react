
                 /* DoxJS version 3.1.3           */
                 /* Created by Double Dimos       */
                 /* Released under MIT license    */
                 /*           \(> _ <)/           */
const defineProperty = Object.defineProperty;
const getKeys = Object.keys || function (obj) {
    let keys = [];
    for (let key in obj) {
        keys.push(key);
    }
    return keys;
};
const _toString = Object.prototype.toString;
const isObject = function (target) {
    return _toString.call(target) === '[object Object]';
};
const isPrimary = function (target) {
    //don't support `Map` `WeakMap` `Set`
    let priTypes = ['[object Number]', '[object String]', '[object Boolean]'];
    return priTypes.indexOf(_toString.call(target)) > -1;
};
const isArray = Array.isArray || function (target) {
    return _toString.call(target) === '[object Array]';
};
const isFunction = function (f) {
    return (f instanceof Function || typeof f === 'function' || _toString.call(f) === '[object Function]');
};
const hasProperty = function (src, key) {
    if (Object.hasOwnProperty) {
        return Object.hasOwnProperty.call(src, key);
    }
    else {
        return (key in src);
    }
};
const warn = (message) => {
    throw new Error(message);
};
const isSame = function (source, target) {
    if (isPrimary(source)) {
        return isPrimary(target) ? source === target : false;
    }
    else if (isArray(source)) {
        if (!isArray(target)) {
            return false;
        }
        if (source.length !== target.length) {
            return false;
        }
        return source.every((item, index) => {
            return item === target[index];
        });
    }
    else if (isObject(source)) {
        let src_keys = getKeys(source), tar_keys = getKeys(target);
        if (src_keys.length !== tar_keys.length) {
            return false;
        }
        src_keys.sort();
        tar_keys.sort();
        if (!src_keys.every((item, index) => {
            return item === tar_keys[index];
        })) {
            return false;
        }
        return src_keys.every((item, index) => {
            return isSame(source[item], target[item]);
        });
    }
    return true;
};

function push(...items) {
    return Array.prototype.push.call(this, ...items);
}
function pop() {
    return Array.prototype.pop.call(this);
}
function shift() {
    return Array.prototype.shift.call(this);
}
function unshift(...items) {
    return Array.prototype.unshift.call(this, ...items);
}
function splice(start = 0, deleteCount = 0, append = []) {
    return Array.prototype.splice.call(this, start, deleteCount, append);
}
function reverse() {
    return Array.prototype.reverse.call(this);
}
function sort(compareFn) {
    return Array.prototype.sort.call(this, compareFn);
}
function map(callbackfn) {
    return Array.prototype.map.call(this, callbackfn);
}
function forEach(callbackfn) {
    return Array.prototype.forEach.call(this, callbackfn);
}
function every(callbackfn) {
    return Array.prototype.every.call(this, callbackfn);
}
function some(callbackfn) {
    return Array.prototype.some.call(this, callbackfn);
}
function filter(callbackfn) {
    return Array.prototype.filter.call(this, callbackfn);
}
function reduce(callbackfn, initialValue) {
    return Array.prototype.reduce.call(this, callbackfn, initialValue);
}
function concat(...items) {
    return Array.prototype.concat.call(this, ...items);
}
function join(separator) {
    return Array.prototype.join.call(this, separator);
}
const methods = ["push", "pop", "shift", "unshift", "splice", "reverse", "sort", "map", "forEach", "every", "some", "filter", "reduce", "concat", "join"];


var dfa = Object.freeze({
	push: push,
	pop: pop,
	shift: shift,
	unshift: unshift,
	splice: splice,
	reverse: reverse,
	sort: sort,
	map: map,
	forEach: forEach,
	every: every,
	some: some,
	filter: filter,
	reduce: reduce,
	concat: concat,
	join: join,
	methods: methods
});

class DoxArray {
    constructor(target, root, parentEvents = []) {
        this.runtimeEvent = {
            isLegal: false,
            value: (store) => { }
        };
        this.eventsStore = {};
        this.dataToProxy = [];
        this.proxy = {
            length: 0
        };
        this.delicate = true;
        this.parentEvents = [];
        this.target = target;
        this.root = root;
        this.keys = getKeys(target);
        this.parentEvents = parentEvents;
        this.init();
    }
    init() {
        this.keys.forEach(key => {
            this.eventsStore[key] = [];
            this.proxy[key] = undefined;
            defineProperty(this.proxy, key, {
                get: () => {
                    if (this.runtimeEvent.isLegal) {
                        this.eventsStore[key] = this.eventsStore[key].reduce((i, f) => {
                            if (f !== i[0]) {
                                i.push(f);
                            }
                            return i;
                        }, [this.runtimeEvent.value]);
                    }
                    if ((this.dataToProxy[key] instanceof DoxObject) || (this.dataToProxy[key] instanceof DoxArray)) {
                        if (this.runtimeEvent.isLegal) {
                            this.dataToProxy[key].extendsRuntimeEvent(this.runtimeEvent);
                        }
                        return this.dataToProxy[key].observe();
                    }
                    else if (isPrimary(this.dataToProxy[key])) {
                        return this.dataToProxy[key];
                    }
                },
                set: (newValue) => {
                    if (!isSame(newValue, this.dataToProxy[key])) {
                        if (isPrimary(newValue)) {
                            this.dataToProxy[key] = newValue;
                        }
                        else if (isObject(newValue)) {
                            this.dataToProxy[key] = new DoxObject(newValue, this.root);
                        }
                        else if (isArray(newValue)) {
                            this.dataToProxy[key] = new DoxArray(newValue, this.root, this.parentEvents);
                        }
                    }
                    if (this.delicate) {
                        this.eventsStore[key].forEach(f => f(this.root.observe()));
                    }
                }
            });
            this.proxy[key] = this.target[key];
        });
        defineProperty(this.proxy, "length", {
            enumerable: false,
            configurable: false,
            writable: true,
            value: this.target.length
        });
        methods.forEach(method => {
            defineProperty(this.proxy, method, {
                configurable: false,
                writable: false,
                enumerable: false,
                value: (...args) => {
                    this.toggleDelicate(false);
                    let result = dfa[method].call(this.proxy, ...args);
                    this.parentEvents.forEach(f => {
                        f(this.root.observe());
                    });
                    this.toggleDelicate();
                    return result;
                }
            });
        });
    }
    toggleDelicate(is = true) {
        this.delicate = is;
    }
    extendsRuntimeEvent(callback) {
        this.runtimeEvent = callback;
    }
    observe() {
        return this.proxy;
    }
}

class DoxObject {
    constructor(target, root) {
        this.keys = [];
        this.runtimeEvent = {
            isLegal: false,
            value: (store) => { }
        };
        this.eventsStore = {};
        this.dataToProxy = {};
        this.proxy = {};
        this.delicate = false;
        this.target = target;
        this.keys = getKeys(target);
        this.root = root;
        this.init();
    }
    init() {
        this.keys.forEach(key => {
            this.eventsStore[key] = [];
            this.proxy[key] = undefined;
            defineProperty(this.proxy, key, {
                get: () => {
                    if (this.runtimeEvent.isLegal) {
                        this.eventsStore[key] = this.eventsStore[key].reduce((i, f) => {
                            if (f !== i[0]) {
                                i.push(f);
                            }
                            return i;
                        }, [this.runtimeEvent.value]);
                    }
                    if ((this.dataToProxy[key] instanceof DoxObject) || (this.dataToProxy[key] instanceof DoxArray)) {
                        if (this.runtimeEvent.isLegal) {
                            this.dataToProxy[key].extendsRuntimeEvent(this.runtimeEvent);
                        }
                        return this.dataToProxy[key].observe();
                    }
                    else if (isPrimary(this.dataToProxy[key])) {
                        return this.dataToProxy[key];
                    }
                },
                set: (newValue) => {
                    if (!isSame(this.dataToProxy[key], newValue)) {
                        if (isPrimary(newValue)) {
                            this.dataToProxy[key] = newValue;
                            this.eventsStore[key].forEach(f => f(this.root.observe()));
                        }
                        else if (isObject(newValue)) {
                            this.dataToProxy[key] = new DoxObject(newValue, this.root);
                            this.eventsStore[key].forEach(f => {
                                this.root.subscribe(f);
                            });
                        }
                        else if (isArray(newValue)) {
                            this.dataToProxy[key] = new DoxArray(newValue, this.root, this.eventsStore[key]);
                            this.eventsStore[key].forEach(f => {
                                this.root.subscribe(f);
                            });
                        }
                    }
                }
            });
            this.proxy[key] = this.target[key];
        });
    }
    extendsRuntimeEvent(callback) {
        this.runtimeEvent = callback;
    }
    observe() {
        return this.proxy;
    }
}

class DoxJS {
    constructor(target) {
        if (!isObject(target)) {
            warn(`DoxJS only accept object as argument`);
        }
        else {
            this.sourceObject = new DoxObject(target, this);
        }
    }
    subscribe(action, excuteLater = false, context) {
        if (isFunction(action)) {
            this.runtimeEvent = {
                isLegal: true,
                value: action
            };
            let fn = () => {
                this.sourceObject.extendsRuntimeEvent(this.runtimeEvent);
                action(this.sourceObject.observe());
                this.runtimeEvent.isLegal = false;
            };
            return (excuteLater ? fn : fn());
        }
        else if (_toString.call(action) === '[object String]') {
            if (hasProperty(this.listeners, action)) {
                if (context) {
                    this.subscribe(this.listeners[action].bind(context), excuteLater);
                }
                else {
                    this.subscribe(this.listeners[action], excuteLater);
                }
            }
        }
        else {
            warn(`First parameter of subscribe should be Function or String`);
        }
    }
    bindListeners(listeners = {}) {
        this.listeners = listeners;
    }
    observe() {
        return this.sourceObject.observe();
    }
    bindActions(actions = {}) {
        this.actions = actions;
    }
    dispatch(action, ...args) {
        if (hasProperty(this.actions, action)) {
            this.actions[action](this.sourceObject.observe(), ...args);
        }
    }
}

export default DoxJS;
