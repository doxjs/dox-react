{"dependencies":[{"name":"/home/msdimos/桌面/workspace/doxjs4/tsconfig.json","includedInParent":true,"mtime":1518530327261},{"name":"./DoxObject","loc":{"line":3,"column":28}},{"name":"./utils","loc":{"line":4,"column":24}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DoxObject_1 = require(\"./DoxObject\");\nconst utils_1 = require(\"./utils\");\nclass DoxJS {\n    constructor(target) {\n        if (!utils_1.isObject(target)) {\n            utils_1.warn(`DoxJS only accept object as argument`);\n        }\n        else {\n            this.sourceObject = new DoxObject_1.DoxObject(target, this);\n        }\n    }\n    subscribe(callback, excuteLater = false) {\n        this.runtimeEvent = {\n            isLegal: true,\n            value: callback\n        };\n        let fn = () => {\n            this.sourceObject.extendsRuntimeEvent(this.runtimeEvent);\n            callback(this.sourceObject.observe());\n            this.runtimeEvent.isLegal = false;\n        };\n        return (excuteLater ? fn : fn());\n    }\n    observe() {\n        return this.sourceObject.observe();\n    }\n    bindActions(actions) {\n        if (!utils_1.isObject(actions)) {\n            utils_1.warn(`Actions should be an object`);\n        }\n        else {\n            this.actions = actions;\n        }\n    }\n    dispach(action) {\n        if (utils_1.hasProperty(this.actions, action)) {\n            this.actions[action](this.sourceObject.observe());\n        }\n    }\n}\nexports.DoxJS = DoxJS;\n","map":{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,mCAA+D;AAG/D;IAKI,YAAY,MAAS;QACjB,EAAE,CAAC,CAAC,CAAC,gBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpB,YAAI,CAAC,sCAAsC,CAAC,CAAC;QACjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,YAAY,GAAG,IAAI,qBAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,QAAwB,EAAE,cAAuB,KAAK;QACnE,IAAI,CAAC,YAAY,GAAG;YAChB,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,QAAQ;SAClB,CAAC;QAEF,IAAI,EAAE,GAAG,GAAG,EAAE;YACV,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACzD,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC;QACtC,CAAC,CAAA;QAED,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAEM,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IACvC,CAAC;IAEM,WAAW,CAAC,OAAmB;QAClC,EAAE,CAAC,CAAC,CAAC,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrB,YAAI,CAAC,6BAA6B,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAC3B,CAAC;IACL,CAAC;IAEM,OAAO,CAAC,MAAc;QACzB,EAAE,CAAC,CAAC,mBAAW,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;QACtD,CAAC;IACL,CAAC;CACJ;AA7CD,sBA6CC","sourcesContent":["import { DoxObject } from \"./DoxObject\";\nimport { isObject, warn, getKeys, hasProperty } from \"./utils\";\nimport { RuntimeEvent, DoxActions, DoxCallback } from \"./DoxInterfaces\";\n\nexport class DoxJS<T> {\n    private runtimeEvent: RuntimeEvent<T>;\n    private sourceObject: DoxObject<T>;\n    private actions: DoxActions;\n\n    constructor(target: T) {\n        if (!isObject(target)) {\n            warn(`DoxJS only accept object as argument`);\n        } else {\n            this.sourceObject = new DoxObject(target, this);\n        }\n    }\n\n    public subscribe(callback: DoxCallback<T>, excuteLater: boolean = false) {\n        this.runtimeEvent = {\n            isLegal: true,\n            value: callback\n        };\n\n        let fn = () => {\n            this.sourceObject.extendsRuntimeEvent(this.runtimeEvent);\n            callback(this.sourceObject.observe());\n            this.runtimeEvent.isLegal = false;\n        }\n\n        return (excuteLater ? fn : fn());\n    }\n\n    public observe(): T {\n        return this.sourceObject.observe();\n    }\n\n    public bindActions(actions: DoxActions) {\n        if (!isObject(actions)) {\n            warn(`Actions should be an object`);\n        } else {\n            this.actions = actions;\n        }\n    }\n\n    public dispach(action: string) {\n        if (hasProperty(this.actions, action)) {\n            this.actions[action](this.sourceObject.observe());\n        }\n    }\n}\n"]}},"hash":"37d189ca9181759a84f692012c2794e5","cacheData":{"env":{}}}